<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.fan.mapper.EmpMapper">
  <resultMap id="BaseResultMap" type="com.fan.domain.Emp">
    <constructor>
      <idArg column="id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="last_name" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="email" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="gender" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="d_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
    </constructor>
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>


  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, last_name, email, gender, d_id
  </sql>

  <!--自定义的sql**************************-->
  <resultMap id="myEmp1" type="com.fan.domain.Emp">
    <id column="id" property="id"></id>
    <result column="last_name" property="lastName"></result>
    <result column="email" property="email"></result>
    <result column="gender" property="gender"></result>
    <!--单个对象的封装-->
    <association column="d_id" property="dept"  select="com.fan.mapper.DeptMapper.selectByPrimaryKey" >
    </association>
  </resultMap>

  <resultMap id="BaseResultMap2" type="com.fan.domain.Emp">
    <id column="id" property="id"></id>
    <result column="last_name" property="lastName"></result>
    <result column="email" property="email"></result>
    <result column="gender" property="gender"></result>
  </resultMap>

  <!--List<Emp> selectByDeptId(Integer deptId),子查询都是交叉-->
  <select id="selectByDeptId" resultMap="myEmp1">
    select * from emp
    <where>
      and d_id = #{deptId}
    </where>
  </select>
  <!--selectAllEmpAndDept(),第一步-->
  <select id="selectAllEmpAndDept" resultMap="myEmp1">
    select <include refid="Base_Column_List"></include>
     from emp
  </select>

  <!--List<Emp> selectAllEmpAndDeptByEmp(Emp emp)-->
  <select id="selectAllEmpAndDeptByEmp" resultMap="myEmp1">
    select <include refid="Base_Column_List"></include>
    from emp
    <where>

      <if test="lastName!=null and lastName !='' ">
        <bind name="lastName" value=" '%' + lastName + '%' "/>
      </if>

      <if test="email!=null and email!=''">
        <bind name="email" value="'%'+email+'%'"/>
      </if>
      <if test="deptName!=null and deptName!=''">
        <bind name="deptName" value="'%'+deptName+'%'"/>
      </if>


      <if test="id!=null">
        and id = #{id}
      </if>

      <if test="lastName!=null and lastName!='' " >
        and last_name like #{lastName}
      </if>
      <if test="email!=null and email!='' ">
        and email like #{email}
      </if>
      <if test="gender!=null and gender!='' ">

        and gender = #{gender}
      </if>
      <if test="deptName!=null and deptName!=''">
        and d_id = #{deptId}
      </if>
    </where>
  </select>
  <!--List<Emp> selectEmpsAndDeptByDeptName(String deptName)-->
  <select id="selectEmpsAndDeptByDeptName" resultMap="BaseResultMap2">
        select <include refid="Base_Column_List"></include>
        from emp
        <where>
          <if test="">
            and d_id = #{deptName}
          </if>
        </where>
  </select>
  <!--List<Emp> selectByEmp(Emp emp)-->
  <select id="selectByEmp" resultMap="myEmp1" parameterType="com.fan.domain.Emp">
    select <include refid="Base_Column_List"></include>
    from emp
    <where>

      <if test="lastName!=null and lastName !='' ">
        <bind name="lastName" value=" '%' + lastName + '%' "/>
      </if>

      <if test="email!=null and email!=''">
        <bind name="email" value="'%'+email+'%'"/>
      </if>

      <if test="id!=null">
        and id = #{id}
      </if>

      <if test="lastName!=null and lastName!='' " >
        and last_name like #{lastName}
      </if>
      <if test="email!=null and email!='' ">
        and email like #{email}
      </if>
      <if test="gender!=null and gender!='' ">

        and gender = #{gender}
      </if>
    </where>
  </select>
  <!--*******************************-->
  <select id="selectByExample" parameterType="com.fan.domain.EmpExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from emp
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from emp
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from emp
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.fan.domain.EmpExample">
    delete from emp
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.fan.domain.Emp">
    insert into emp (id, last_name, email, 
      gender, d_id)
    values (#{id,jdbcType=INTEGER}, #{lastName,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, 
      #{gender,jdbcType=VARCHAR}, #{dId,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.fan.domain.Emp">
    insert into emp
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="lastName != null">
        last_name,
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="gender != null">
        gender,
      </if>
      <if test="dId != null">
        d_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="lastName != null">
        #{lastName,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="gender != null">
        #{gender,jdbcType=VARCHAR},
      </if>
      <if test="dId != null">
        #{dId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.fan.domain.EmpExample" resultType="java.lang.Long">
    select count(*) from emp
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update emp
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.lastName != null">
        last_name = #{record.lastName,jdbcType=VARCHAR},
      </if>
      <if test="record.email != null">
        email = #{record.email,jdbcType=VARCHAR},
      </if>
      <if test="record.gender != null">
        gender = #{record.gender,jdbcType=VARCHAR},
      </if>
      <if test="record.dId != null">
        d_id = #{record.dId,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update emp
    set id = #{record.id,jdbcType=INTEGER},
      last_name = #{record.lastName,jdbcType=VARCHAR},
      email = #{record.email,jdbcType=VARCHAR},
      gender = #{record.gender,jdbcType=VARCHAR},
      d_id = #{record.dId,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.fan.domain.Emp">
    update emp
    <set>
      <if test="lastName != null">
        last_name = #{lastName,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="gender != null">
        gender = #{gender,jdbcType=VARCHAR},
      </if>
      <if test="dId != null">
        d_id = #{dId,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.fan.domain.Emp">
    update emp
    set last_name = #{lastName,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      gender = #{gender,jdbcType=VARCHAR},
      d_id = #{dId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>